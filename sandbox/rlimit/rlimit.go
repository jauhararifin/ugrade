package rlimit

import (
	"syscall"

	"github.com/jauhararifin/ugrade/sandbox"

	"github.com/pkg/errors"
)

type defaultRlimit struct {
}

// Set set rlimit of current process
func (*defaultRlimit) Set(rlimitType int, cur, max uint64) error {
	var rLimit syscall.Rlimit
	err := syscall.Getrlimit(rlimitType, &rLimit)
	if err != nil {
		return errors.Wrap(err, "cannot get rlimit")
	}

	rLimit.Max = max
	rLimit.Cur = cur

	if err := syscall.Setrlimit(rlimitType, &rLimit); err != nil {
		return errors.Wrap(err, "cannot set rlimit")
	}

	return nil
}

// LimitOpenFile limit the number of open file of current processs.
func (rlim *defaultRlimit) LimitOpenFile(nopenfile uint64) error {
	err := rlim.Set(syscall.RLIMIT_NOFILE, nopenfile, nopenfile)
	return errors.Wrap(err, "cannot set number of open file limit")
}

// LimitFSize limit the size of file generated by current process.
func (rlim *defaultRlimit) LimitFSize(fsize uint64) error {
	err := rlim.Set(syscall.RLIMIT_FSIZE, fsize, fsize)
	return errors.Wrap(err, "cannot set number of open file limit")
}

// LimitNProcess limit the number of process creation.
func (rlim *defaultRlimit) LimitNProcess(nproc uint64) error {
	rlimitNProc := 6 // constant of kernel ulimit for limiting fork
	err := rlim.Set(rlimitNProc, nproc, nproc)
	return errors.Wrap(err, "cannot set number of process creation")
}

// LimitStack limit stack size of process.
func (rlim *defaultRlimit) LimitStack(stackSize uint64) error {
	rlimitStack := 3
	err := rlim.Set(rlimitStack, stackSize, stackSize)
	return errors.Wrap(err, "cannot set stack size limit")
}

// New create default implementatoin of `sandbox.RLimit`
func New() sandbox.RLimit {
	return &defaultRlimit{}
}
